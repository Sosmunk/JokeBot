package org.bot.command;

import org.bot.Joke;
import org.bot.dao.JokeDAO;
import org.bot.service.JokeService;
import org.bot.service.JokeServiceImpl;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
 */
public class CommandProcessorTest {
    JokeDAO jokeDAO = Mockito.mock(JokeDAO.class);
    JokeService jokeService = new JokeServiceImpl(jokeDAO);
    private final CommandProcessor commandProcessor = new CommandProcessor(jokeService);

    private final String firstJoke = """
            ‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
            ‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
            """;

    /**
     * –¢–µ—Å—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
     */
    @Test
    public void testRunCommandWithNull() {
        Assert.assertEquals("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                commandProcessor.runCommand(null));
        Assert.assertEquals("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                commandProcessor.runCommand(""));
        Assert.assertEquals("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                commandProcessor.runCommand("/exampleCommand"));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
     */
    @Test
    public void testStartCommand() {
        String command = "/start";
        Assert.assertEquals("Wrong message", "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç - –ª—é–±–∏—Ç–µ–ª—å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤." +
                        " –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ /help.",
                commandProcessor.runCommand(command));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
     */
    @Test
    public void testHelpCommand(){
        String command = "/help";
        Assert.assertEquals("Wrong message", """
                        –í–æ—Ç –≤—Å—ë —á—Ç–æ —è —É–º–µ—é:
                                        
                        üòÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (/joke)
                            
                        üòÇüî¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
                             (/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>)
                            
                        üë∂üèº –°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ (/help)
                        """,
                commandProcessor.runCommand(command));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /joke
     */
    @Test
    public void testJokeCommand(){
        Joke joke = new Joke(firstJoke);
        joke.setId(1);
        String command = "/joke";
        Mockito.when(jokeService.getRandomJoke()).thenReturn(joke);
        Assert.assertEquals("Invalid message",
                "–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1\n" + firstJoke,
                commandProcessor.runCommand(command));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke &lt;id&gt;
     */
    @Test
    public void testGetJokeCommand(){
        Joke joke = new Joke(firstJoke);
        joke.setId(1);
        String command = "/getJoke 1";
        Mockito.when(jokeService.getJoke(1)).thenReturn(joke);
        Assert.assertEquals("Invalid message",
                "–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1\n" + firstJoke,
                commandProcessor.runCommand(command));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
     */
    @Test
    public void getJokeNotFoundTest() {
        String command = "/getJoke 123";
        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                commandProcessor.runCommand(command));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke &lt;id&gt; –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º id
     */
    @Test
    public void getJokeNegativeNotFound() {
        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                commandProcessor.runCommand("/getJoke -1"));
    }

    /**
     * –¢–µ—Å—Ç /getJoke –ø—Ä–∏ –±—É–∫–≤–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
     */
    @Test
    public void getJokeLetterArgsTest() {
        Assert.assertEquals("""
                        –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã! –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.
                        –ù–∞–ø—Ä–∏–º–µ—Ä: "/getJoke 1"
                        """,
                commandProcessor.runCommand("/getJoke AAAAAAAAA"));
    }

    /**
     * –¢–µ—Å—Ç /getJoke –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     */
    @Test
    public void getJokeNoArgsTest() {
        Assert.assertEquals("–í–≤–µ–¥–∏—Ç–µ \"/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>\"",
                commandProcessor.runCommand("/getJoke"));
    }


}
