package org.bot.command;

import org.bot.Joke;
import org.bot.Rate;
import org.bot.dao.JokeDAO;
import org.bot.dao.RatingDAO;
import org.bot.dao.RatingService;
import org.bot.dao.RatingServiceImpl;
import org.bot.enumerable.ChatPlatform;
import org.bot.service.JokeService;
import org.bot.service.JokeServiceImpl;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.List;

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
 */
public class CommandProcessorTest {
	JokeDAO mockJokeDao = Mockito.mock(JokeDAO.class);
	JokeService jokeService = new JokeServiceImpl(mockJokeDao);
	private final RatingDAO mockRatingDao = Mockito.mock(RatingDAO.class);
	private final RatingService ratingService = new RatingServiceImpl(mockRatingDao, jokeService);

	private final CommandProcessor commandProcessor = new CommandProcessor(jokeService, ratingService);

	private final Joke testJoke = new Joke(firstJoke);
	private final Joke joke2 = new Joke(secondJoke);

	private final static String firstJoke = """
			‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
			‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
			""";
	private final static String secondJoke = """
			–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, –æ–±–≤–∏–Ω–µ–Ω–Ω—ã–µ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞, –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –¥–∞–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
			""";

	private final Long chatId = 12345L;


	public CommandProcessorTest() {
		this.testJoke.setId(1);
		this.joke2.setId(2);
	}

	/**
	 * –¢–µ—Å—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
	 */
	@Test
	public void testRunCommandWithNull() {
		Assert.assertEquals("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
				commandProcessor.runCommand(null, chatId, null));
		Assert.assertEquals("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
				commandProcessor.runCommand("", chatId, null));
		Assert.assertEquals("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
				commandProcessor.runCommand("/exampleCommand", chatId, null));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
	 */
	@Test
	public void testStartCommand() {
		String command = "/start";
		Assert.assertEquals("Wrong message", "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç - –ª—é–±–∏—Ç–µ–ª—å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤." +
						" –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ /help.",
				commandProcessor.runCommand(command, chatId, null));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
	 */
	@Test
	public void testHelpCommand() {
		String command = "/help";
		Assert.assertEquals("Wrong message", """
						–í–æ—Ç –≤—Å—ë —á—Ç–æ —è —É–º–µ—é:
						                
						üòÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (/joke)
						    
						üòÇüî¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
						     (/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>)
						    
						üë∂üèº –°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ (/help)
						                        
						‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç
						   (/rate <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞> <–æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5>)
						""",
				commandProcessor.runCommand(command, chatId, null));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /joke
	 */
	@Test
	public void testJokeCommand() {
		String command = "/joke";
		Mockito.when(jokeService.getRandomJoke())
				.thenReturn(testJoke);
		Assert.assertEquals("Invalid message",
				"–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1\n" + firstJoke,
				commandProcessor.runCommand(command, chatId, null));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke &lt;id&gt;
	 */
	@Test
	public void testGetJokeCommand() {
		String command = "/getJoke 1";
		Mockito.when(jokeService.getJoke(1))
				.thenReturn(testJoke);
		Assert.assertEquals("Invalid message",
				"–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1\n" + firstJoke,
				commandProcessor.runCommand(command, chatId, null));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void getJokeNotFoundTest() {
		String command = "/getJoke 123";
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
				commandProcessor.runCommand(command, chatId, null));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke &lt;id&gt; –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º id
	 */
	@Test
	public void getJokeNegativeNotFound() {
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
				commandProcessor.runCommand("/getJoke -1",
						chatId,
						null));
	}

	/**
	 * –¢–µ—Å—Ç /getJoke –ø—Ä–∏ –±—É–∫–≤–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
	 */
	@Test
	public void getJokeLetterArgsTest() {
		Assert.assertEquals("""
						–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã! –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.
						–ù–∞–ø—Ä–∏–º–µ—Ä: "/getJoke 1"
						""",
				commandProcessor.runCommand("/getJoke AAAAAAAAA",
						chatId,
						null));
	}

	/**
	 * –¢–µ—Å—Ç /getJoke –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
	 */
	@Test
	public void getJokeNoArgsTest() {
		Assert.assertEquals("–í–≤–µ–¥–∏—Ç–µ \"/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>\"",
				commandProcessor.runCommand("/getJoke",
						chatId,
						null));
	}

	/**
	 * –¢–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void testRateNotExistingJoke() {
		String notFound = commandProcessor.runCommand("/rate 999 5",
				chatId, null);
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", notFound);
		Mockito.verify(mockRatingDao, Mockito.never())
				.saveRating(Mockito.any());
		Mockito.verify(mockRatingDao, Mockito.never())
				.updateRating(Mockito.any(), Mockito.any(Byte.class));
	}

	/**
	 * –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void testRateExistingJoke() {
		Mockito.when(jokeService.getJoke(2))
				.thenReturn(joke2);

		String res = commandProcessor.runCommand("/rate 2 1",
				chatId,
				null);
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –æ—Ü–µ–Ω–µ–Ω", res);
		Mockito.verify(mockRatingDao, Mockito.times(1))
				.saveRating(Mockito.any(Rate.class));
		Mockito.verify(mockRatingDao, Mockito.never())
				.updateRating(Mockito.any(), Mockito.any(Byte.class));
	}

	/**
	 * –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void testRateCorrectPrint() {
		Mockito.when(jokeService.getJoke(2))
				.thenReturn(joke2);

		joke2.setRatings(List.of(new Rate(chatId, (byte) 1, joke2)));
		String hasRating = commandProcessor.runCommand("/getJoke 2",
				chatId,
				null);
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ2\n" + joke2.getText()
						+ "\n" + "–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–µ–∫–¥–æ—Ç–∞: 1.0",
				hasRating);
		joke2.setRatings(List.of(new Rate(chatId, (byte) 1, joke2),
				new Rate(123L, (byte) 3, joke2)));
		String hasMultipleRatings = commandProcessor.runCommand("/getJoke 2",
				chatId,
				null);
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ2\n" + joke2.getText()
						+ "\n" + "–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–µ–∫–¥–æ—Ç–∞: 2.0",
				hasMultipleRatings);
	}

	/**
	 * –¢–µ—Å—Ç /rate –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
	 */
	@Test
	public void testRateWrongCountStars() {
		String tooManyStars = commandProcessor.runCommand("/rate 2 100",
				chatId, null);
		Assert.assertEquals("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞",
				tooManyStars);
		String notEnoughStars = commandProcessor.runCommand("/rate 2 -1",
				chatId, null);
		Assert.assertEquals("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞", notEnoughStars);
	}

	/**
	 * –¢–µ—Å—Ç –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
	 */
	@Test
	public void testRateWrongTypeNumberStars() {
		String abracadabraStars = commandProcessor
				.runCommand("/rate 2 abracadabra",
						chatId,
						null);
		Assert.assertEquals(
				"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (1-5)",
				abracadabraStars);
		String overByteLimitStars = commandProcessor.runCommand(
				"/rate 2 100000000",
				chatId, null);
		Assert.assertEquals(
				"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (1-5)",
				overByteLimitStars);
	}

	/**
	 * –¢–µ—Å—Ç –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	 */
	@Test
	public void testRateIncorrectNumberArguments() {
		Mockito.when(jokeService.getJoke(2))
				.thenReturn(joke2);

		String tooManyArgs = commandProcessor
				.runCommand("/rate 2 1 1 1 1 1 1 1", chatId, null);
		String noArgs = commandProcessor.runCommand("/rate ",
				chatId, null);
		String oneArg = commandProcessor.runCommand("/rate 2",
				chatId, null);
		String invalidArgs = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤";

		Assert.assertEquals(invalidArgs, tooManyArgs);
		Assert.assertEquals(invalidArgs, noArgs);
		Assert.assertEquals(invalidArgs, oneArg);
	}

	/**
	 * –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void testUpdateRate() {
		Rate rate = new Rate(chatId, (byte) 1, null);

		Mockito.when(jokeService.getJoke(2))
				.thenReturn(joke2);

		Mockito.when(mockRatingDao.findRating(2, chatId))
				.thenReturn(rate);

		String updateSameJoke = commandProcessor
				.runCommand("/rate 2 2", chatId, null);

		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –æ—Ü–µ–Ω–µ–Ω", updateSameJoke);
		Mockito.verify(mockRatingDao, Mockito.times(1))
				.updateRating(rate, (byte) 2);
	}

	/**
	 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞,
	 * –µ—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /joke –∏–ª–∏ /getJoke
	 */
	@Test
	public void testRateNoLastJoke() {
		String noLastJokes = commandProcessor.runCommand("1‚òÜ",
				chatId, null);
		Assert.assertEquals("–ù–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è", noLastJokes);
	}

	/**
	 * –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void rateLastTest() {

		Rate testRate = new Rate(chatId, (byte) 1, testJoke);
		Mockito.when(jokeService.getJoke(testJoke.getId()))
				.thenReturn(testJoke);

		commandProcessor.runCommand("/getJoke " + testJoke.getId(),
				chatId, ChatPlatform.TELEGRAM);

		String rated = commandProcessor.runCommand("1‚òÜ",
				chatId, ChatPlatform.TELEGRAM);
		Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –æ—Ü–µ–Ω–µ–Ω", rated);

		Mockito.verify(mockRatingDao, Mockito.times(1))
				.saveRating(Mockito.any(Rate.class));

		Mockito.when(mockRatingDao.findRating(testJoke.getId(), chatId))
				.thenReturn(testRate);

		for (int i = 2; i <= 5; i++) {
			String update = commandProcessor.runCommand(i + "‚òÜ",
					chatId, ChatPlatform.TELEGRAM);
			Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –æ—Ü–µ–Ω–µ–Ω", update);
			Assert.assertEquals(jokeService.getLastJokeId(chatId, ChatPlatform.TELEGRAM), testJoke.getId());
			Mockito.verify(mockRatingDao, Mockito.times(i - 1))
					.updateRating(
							Mockito.any(Rate.class),
							Mockito.any(byte.class)
					);
		}
	}

	/**
	 * –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
	 */
	@Test
	public void testSaveLastJoke() {
		Mockito.when(jokeService.getJoke(1))
				.thenReturn(testJoke);

		commandProcessor.runCommand("/getJoke " + testJoke.getId(),
				chatId, ChatPlatform.TELEGRAM);
		Mockito.when(jokeService.getJoke(2))
				.thenReturn(joke2);

		commandProcessor.runCommand("/getJoke " + joke2.getId(),
				chatId, ChatPlatform.TELEGRAM);

		Assert.assertEquals(jokeService.getLastJokeId(chatId, ChatPlatform.TELEGRAM), joke2.getId());
		Assert.assertNotEquals(jokeService.getLastJokeId(chatId, ChatPlatform.TELEGRAM), testJoke.getId());
	}
}
