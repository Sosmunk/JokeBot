package org.bot.commands;

import org.bot.FakeService;
import org.bot.Joke;
import org.bot.Rate;
import org.bot.dao.RatingDAO;
import org.bot.dao.RatingService;
import org.bot.dao.RatingServiceImpl;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ /help, /start, /joke, /getJoke &lt;id&gt;
 */
public class CommandTest {

    private final FakeService fakeService = new FakeService();

    private final RatingDAO mockRatingDao = Mockito.mock(RatingDAO.class);
    private final RatingService ratingService = new RatingServiceImpl(mockRatingDao, fakeService);

    private final CommandProcessor commandProcessor = new CommandProcessor(fakeService, ratingService);

    private final String FIRST_JOKE = """
            ‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
            ‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
            """;

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
     */
    @Test
    public void testStartCommand() {
        String command = "/start";
        Assert.assertEquals("Wrong message", "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç - –ª—é–±–∏—Ç–µ–ª—å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤." +
                        " –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ /help.",
                commandProcessor.runCommand(command, null, null));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
     */
    @Test
    public void testHelpCommand(){
        String command = "/help";
        Assert.assertEquals("Wrong message", """
                        –í–æ—Ç –≤—Å—ë —á—Ç–æ —è —É–º–µ—é:
                                        
                        üòÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (/joke)
                            
                        üòÇüî¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
                             (/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>)
                            
                        üë∂üèº –°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ (/help)
                        """,
                commandProcessor.runCommand(command, null, null));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /joke
     */
    @Test
    public void testJokeCommand(){
        fakeService.saveJoke(new Joke(FIRST_JOKE));

        String command = "/joke";
        Assert.assertEquals("Invalid message", String.format("–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1%n") + FIRST_JOKE,
                commandProcessor.runCommand(command, null, null));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke &lt;id>&gt;
     */
    @Test
    public void testGetJokeCommand(){
        fakeService.saveJoke(new Joke(FIRST_JOKE));

        String command = "/getJoke 1";
        Assert.assertEquals("Invalid message", String.format("–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1%n") + FIRST_JOKE,
                commandProcessor.runCommand(command, null, null));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
     */
    @Test
    public void getJokeNotFoundTest() {
        String command = "/getJoke 123";
        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", commandProcessor.runCommand(command, null, null));

    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /rate
     */
    @Test
    public void rateJokeTest() {
        Joke joke = new Joke("aaaa");
        joke.setId(1);
        fakeService.saveJoke(joke);

        // –û—Ü–µ–Ω–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        String notFound = commandProcessor.runCommand("/rate 999 5", 1L, null);
        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", notFound);
        Mockito.verify(mockRatingDao, Mockito.never()).saveRating(Mockito.any());
        Mockito.verify(mockRatingDao, Mockito.never()).updateRating(Mockito.any(), Mockito.any(Byte.class));

        // –û—Ü–µ–Ω–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        String res = commandProcessor.runCommand("/rate 1 1", 1L, null);
        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –æ—Ü–µ–Ω–µ–Ω", res);
        Mockito.verify(mockRatingDao, Mockito.times(1))
                .saveRating(Mockito.any(Rate.class));
        Mockito.verify(mockRatingDao, Mockito.never()).updateRating(Mockito.any(), Mockito.any(Byte.class));

        // 100 –∑–≤–µ–∑–¥ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ 1-5
        String tooManyStars = commandProcessor.runCommand("/rate 1 100", 1L, null);
        Assert.assertEquals("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞", tooManyStars);
        String notEnoughStars = commandProcessor.runCommand("/rate 1 -1", 1L, null);
        Assert.assertEquals("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞", notEnoughStars);

        // –£–∫–∞–∑–∞–Ω–æ –Ω–µ byte –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
        String abracadabraStars = commandProcessor
                .runCommand("/rate 1 abracadabra",
                        1L,
                        null);
        Assert.assertEquals("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (1-5)", abracadabraStars);
        String overByteLimitStars = commandProcessor.runCommand("/rate 1 100000000", 1L, null);
        Assert.assertEquals("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (1-5)", overByteLimitStars);


        // –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        String tooManyArgs = commandProcessor
                .runCommand("/rate 1 1 1 1 1 1 1 1", 1L, null);
        String noArgs = commandProcessor.runCommand("/rate ", 1L, null);
        String oneArg = commandProcessor.runCommand("/rate 1", 1L, null);
        String invalidArgs = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤";

        Assert.assertEquals(invalidArgs, tooManyArgs);
        Assert.assertEquals(invalidArgs, noArgs);
        Assert.assertEquals(invalidArgs, oneArg);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
        Mockito.when(mockRatingDao.findRating(1, 1L))
                .thenReturn(new Rate(1L, (byte) 1, null));

        String updateSameJoke = commandProcessor
                .runCommand("/rate 1 2", 1L, null);

        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –æ—Ü–µ–Ω–µ–Ω", updateSameJoke);
        Mockito.verify(mockRatingDao, Mockito.times(1))
                .updateRating(Mockito.any(Rate.class), Mockito.any(Byte.class));

    }

    @Test
    public void rateLastTest() {
        //TODO: —Ç–µ—Å—Ç—ã
    }
}
