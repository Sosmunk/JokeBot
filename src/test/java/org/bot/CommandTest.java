package org.bot;

import org.bot.commands.CommandProcessor;
import org.bot.dto.CommandData;
import org.junit.Assert;
import org.junit.Test;

public class CommandTest {

    FakeService fakeService = new FakeService();
    CommandProcessor commandProcessor = new CommandProcessor(fakeService);

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
     */
    @Test
    public void testStartCommand(){
        CommandData commandData = new CommandData("/start",null);
        Assert.assertEquals("Wrong message","–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç - –ª—é–±–∏—Ç–µ–ª—å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤." +
                " –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ /help.",
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
     */
    @Test
    public void testHelpCommand(){
        CommandData commandData = new CommandData("/help",null);
        Assert.assertEquals("Wrong message","""
                –í–æ—Ç –≤—Å—ë —á—Ç–æ —è —É–º–µ—é:
                                
                üòÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (/joke)
                    
                üòÇüî¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
                     (/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>)
                    
                üë∂üèº –°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ (/help)
                """,
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /joke
     */
    @Test
    public void testJokeCommand(){
        fakeService.saveJoke(new Joke("""
                ‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
                ‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
                """));

        CommandData commandData = new CommandData("/joke",null);
        Assert.assertEquals("Invalid message",String.format("–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1%n")+"""
                ‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
                ‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
                """,
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke <id>
     */
    @Test
    public void testGetJokeCommand(){
        fakeService.saveJoke(new Joke("""
                ‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
                ‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
                """));

        CommandData commandData = new CommandData("/getJoke", "1");
        Assert.assertEquals("Invalid message", String.format("–ê–Ω–µ–∫–¥–æ—Ç ‚Ññ1%n") + """
                        ‚Äî –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –ª–∏—Ñ—Ç, –∞ –µ–º—É –Ω–∞–¥–æ –Ω–∞ 12‚Äî–π —ç—Ç–∞–∂.
                        ‚Äî –ù–∞–∂–∏–º–∞–µ—Ç 1, –ø–æ—Ç–æ–º 2 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–∏—Ö–æ—Ä–∞–¥–æ—á–Ω–æ –∏—Å–∫–∞—Ç—å –∫–Ω–æ–ø–∫—É Enter.
                        """,
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
     */
    @Test
    public void getJokeNotFoundTest() {
        CommandData getJokecommandData = new CommandData("/getJoke", "123");
        Assert.assertEquals("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", commandProcessor.runCommand(getJokecommandData));

    }
}
