package org.bot;

import org.bot.commands.CommandProcessor;
import org.bot.dao.JokeService;
import org.bot.dao.JokeServiceImpl;
import org.bot.dto.CommandData;
import org.junit.Assert;
import org.junit.Test;

public class CommandTest {
    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
     */
    @Test
    public void testStartCommand(){
        CommandProcessor commandProcessor = new CommandProcessor(null);
        CommandData commandData = new CommandData("/start",null);
        Assert.assertEquals("Wrong message","–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç - –ª—é–±–∏—Ç–µ–ª—å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤." +
                " –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ /help.",
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
     */
    @Test
    public void testHelpCommand(){
        CommandProcessor commandProcessor = new CommandProcessor(null);
        CommandData commandData = new CommandData("/help",null);
        Assert.assertEquals("Wrong message","""
                –í–æ—Ç –≤—Å—ë —á—Ç–æ —è —É–º–µ—é:
                                
                üòÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (/joke)
                    
                üòÇüî¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
                     (/getJoke <–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞>)
                    
                üë∂üèº –°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ (/help)
                """,
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /joke
     */
    @Test
    public void testJokeCommand(){
        // TODO : –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–∫–µ—Ä –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
        JokeService jokeService = new JokeServiceImpl();
        CommandProcessor commandProcessor = new CommandProcessor(jokeService);
        CommandData commandData = new CommandData("/joke",null);
        Assert.assertEquals("Wrong message","""
                –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç:
                                
                –∫—Ä—É–∂–∫—É –ø–∏–≤–∞,
                2 –∫—Ä—É–∂–∫–∏ –ø–∏–≤–∞,
                0 –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞,
                999999999 –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞,
                —è—â–µ—Ä–∏—Ü—É –≤ —Å—Ç–∞–∫–∞–Ω–µ,
                ‚Äì1 –∫—Ä—É–∂–∫—É –ø–∏–≤–∞,
                qwertyuip –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞.
                                
                –ü–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –≥–¥–µ —Ç—É–∞–ª–µ—Ç. –ë–∞—Ä –≤—Å–ø—ã—Ö–∏–≤–∞–µ—Ç –ø–ª–∞–º–µ–Ω–µ–º, –≤—Å–µ –ø–æ–≥–∏–±–∞—é—Ç.
                """,
                commandProcessor.runCommand(commandData));
    }

    /**
     * –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /getJoke <id>
     */
    @Test
    public void testGetJokeCommand(){
        // TODO : –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–∫–µ—Ä –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
        JokeService jokeService = new JokeServiceImpl();
        CommandProcessor commandProcessor = new CommandProcessor(jokeService);
        CommandData commandData = new CommandData("/getJoke","1");
        Assert.assertTrue("Incorrect input",commandData.getArgs().matches("[0-9]+"));
        Assert.assertTrue("Incorrect input",Integer.parseInt(commandData.getArgs()) > 0);
        Assert.assertEquals("Invalid message","""
                –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç:
                                
                –∫—Ä—É–∂–∫—É –ø–∏–≤–∞,
                2 –∫—Ä—É–∂–∫–∏ –ø–∏–≤–∞,
                0 –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞,
                999999999 –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞,
                —è—â–µ—Ä–∏—Ü—É –≤ —Å—Ç–∞–∫–∞–Ω–µ,
                ‚Äì1 –∫—Ä—É–∂–∫—É –ø–∏–≤–∞,
                qwertyuip –∫—Ä—É–∂–µ–∫ –ø–∏–≤–∞.
                                
                –ü–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –≥–¥–µ —Ç—É–∞–ª–µ—Ç. –ë–∞—Ä –≤—Å–ø—ã—Ö–∏–≤–∞–µ—Ç –ø–ª–∞–º–µ–Ω–µ–º, –≤—Å–µ –ø–æ–≥–∏–±–∞—é—Ç.
                """,
                commandProcessor.runCommand(commandData));
    }
}
